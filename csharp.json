{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// Documentacao: https://code.visualstudio.com/docs/editor/userdefinedsnippets
	// Helper: https://snippet-generator.app/
	"Criar_Evento": {
		"prefix": "event",
		"body": [
		  "\tpublic class ${1:eventName}Event : DomainEventBase",
		  "\t{",
		  "\t\tpublic ${1:eventName}Event(Guid aggregateID) : base(aggregateID)",
		  "\t\t{\t\t\t",
		  "\t\t}",
		  "",
		  "\t\tprivate ${1:eventName}Event(Guid aggregateID, long aggregateVersion) : base(aggregateID, aggregateVersion)",
		  "\t\t{\t\t\t",
		  "\t\t}",
		  "",
		  "\t\tpublic override DomainEventBase WithAggregate(Guid aggregateId, long aggregateVersion)",
		  "\t\t{",
		  "\t\t\treturn new ${1:eventName}Event(aggregateId, aggregateVersion);",
		  "\t\t}",
		  "\t}"
		],
		"description": "Criar_Evento"
	  },
	  "Criar_ValueObject": {
		"prefix": "valueobject",
		"body": [
		  "\tpublic class ${1:valueObjectName} : ValueObject<Status>",
		  "\t{",
		  "\t\tpublic ${1:valueObjectName}()",
		  "\t\t{",
		  "",
		  "\t\t}",
		  "",
		  "\t\tprotected override IEnumerable<object> GetEqualityComponents()",
		  "\t\t{",
		  "\t\t\tyield return;",
		  "\t\t}",
		  "\t}"
		],
		"description": "Criar_ValueObject"
		},
		"fact": {
			"prefix": "fact",
			"body": [
				"\t\t[Fact]",
				"\t\tpublic void ${1:metodo}_${2:condicao}_${3:resultado}()",
				"\t\t{",
				"\t\t\t// Arrange",
				"\t\t\t$0",
				"\t\t\t// Act\t\t",
				"\t",
				"\t\t\t// Assert",
				"\t\t\t",
				"\t\t}"
			],
			"description": "fact"
		},
		"theory": {
			"prefix": "theory",
			"body": [
				"\t\t[Theory]",
				"\t\t[InlineData(\"\")]",
				"\t\tpublic void ${1:metodo}_${2:condicao}_${3:resultado}(${4:tipo} ${5:variavel})",
				"\t\t{",
				"\t\t\t// Arrange",
				"\t\t\t$0",
				"\t\t\t// Act",
				"",
				"\t\t\t// Assert",
				"\t\t }   "
			],
			"description": "theory"
		},
		"throws": {
			"prefix": "throws",
			"body": [
				"Assert.Throws<DomainException>(() => $0);"
			],
			"description": "throws"
		},
		"apply": {
			"prefix": "apply",
			"body": [
				"\t\tpublic void Apply(${1:eventName}Event @event)",
				"\t\t{",
				"\t\t\t$0",
				"\t\t}"
			],
			"description": "apply"
		},
		"contract": {
			"prefix": "contract",
			"body": [
				"new Contract().Requires()",
				"\t\t\t.$0",
				"\t\t\t.Check(); "
			],
			"description": "contract"
		}
}